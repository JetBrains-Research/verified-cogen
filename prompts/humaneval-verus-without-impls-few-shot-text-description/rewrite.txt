Rewrite the following verus code with implementations of some functions missing. While rewriting it, ensure that it verifies. Include invariants and assertions. Don't remove any helper functions (annotated with spec), they are there to help you. Prefer loops to recursion.
Use helper functions only in invariants, asserts and conditions (in `if` or `while` conditions). Don't use helpers in the plain code.
Do not change helper functions.
Add code and invariants to other functions.
Ensure that the invariants are as comprehensive as they can be.
Even if you think some invariant is not totally necessary, better add it than not.
Don't add any additional text comments, your response must contain only program with invariants.
Do not provide ANY explanations. Don't include markdown backticks. Respond only in verus code, nothing else.
You might need to work with accumulating functions, such as sum, so here's an example of how to do that:
```verus
pub open spec fn sum(numbers: Seq<u32>) -> int {
    numbers.fold_left(0, |acc: int, x| acc + x)
}
proof fn sum_bound(numbers: Seq<u32>)
    ensures
        sum(numbers) <= numbers.len() * u32::MAX,
    decreases numbers.len(),
{
    if numbers.len() == 0 {
    } else {
        sum_bound(numbers.drop_last());
    }
}
fn sum_numbers(numbers: Vec<u32>) -> (result: u64)
    requires
        numbers.len() < u32::MAX,
    ensures
        result.0 == sum(numbers@),
{
    let mut sum_value: u64 = 0;
    for index in 0..numbers.len()
        invariant
            numbers.len() < u32::MAX,
            sum_value == sum(numbers@.take(index as int)),
            index <= numbers.len(),
            index >= 0,
    {
        proof {
            sum_bound(numbers@.take(index as int));
            assert(sum_value <= index * u32::MAX);
        }
        assert(numbers@.take(index as int + 1).drop_last() =~= numbers@.take(index as int));
        assert(numbers[index as int] == numbers@.take(index as int + 1).last());
        sum_value += numbers[index] as u64;
    }
    assert(numbers@.take(numbers@.len() as int) =~= numbers@);
    sum_value
}
```
To help you, here's a text description given to a person who wrote this program:

{text_description}

The program:
{program}