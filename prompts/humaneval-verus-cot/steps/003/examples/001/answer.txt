As we've seen, the loop in the `sum_loop` function goes over the elements of the array `numbers` and adds them to the `s` variable, which is equal to the `sum(numbers@.subrange(0, i as int))` for all `i`, such that `0 <= i <= numbers@.len()`. This means that during the execution of the loop the following invariant holds:
1. `0 <= i <= numbers@.len()`
2. `s == sum(numbers@.take(i as int))`
            
The second invariant might be a bit difficult to prove, as it adds the last element of the array to the sum, while, as I've said before, the `sum` function is defined as `sum(a) == a[0] + sum(a.subrange(1, a.len() - 1))`. However, as we've seen, it's possible to use the `sum_prop` function to prove that this invariant holds.
Let's work out how to use it. If applied to the `numbers@.subrange(0, i + 1)`, we get:
`sum(numbers@.subrange(0, i + 1)) == sum(numbers@.subrange(0, i + 1).subrange(0, i as int)) + numbers@[i as int]`. It might be difficult for verus to prove that `sum(numbers@.subrange(0, i + 1).subrange(0, i as int)) == sum(numbers@.subrange(0, i as int))`, so I'd suggest adding an assertion before calling `sum_prop` to make sure that this is the case, namely `assert (numbers@.subrange(0, i + 1).subrange(0, i as int) == numbers@.subrange(0, i as int))`.
A lemma can only be used inside a proof block and can also add the assertions in this block. So, to use the `sum_prop`, I'd suggest the following code:
```
proof {
    assert (numbers@.subrange(0, i + 1).subrange(0, i as int) == numbers@.subrange(0, i as int));
    sum_prop(numbers@.subrange(0, i + 1));
    assert(sum(numbers@.subrange(0, i + 1)) == sum(numbers@.subrange(0, i + 1).subrange(0, i as int)) + numbers@[i as int]);
}
```

After the end of the loop we know that `i == numbers@.len()` from the first invariant and loop condition `i < numbers.len()` being false. Applying this to the second invaraint we deduce `s == sum(numbers@.subrange(0, numbers@.len() as int)). But in order to prove the postcondition, we need to let verus know that this `numbers@.subrange(0, numbers@.len() as int)` is the entire sequence `numbers@`. So i suggest adding this after the end of the loop
```
assert(numbers@.subrange(0, numbers.len() as int) == numbers@);
```

In conclusion, we can say that two invariants hold and the second one could be proved using the `sum_prop` function.
