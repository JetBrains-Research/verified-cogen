Rewrite the following Python program, adding correct Nagini invariants into `while` loops.
Do not change the code, only add the invariants.
Ensure that the invariants are as comprehensive as they can be.
Even if you think some invariant is not totally necessary, better add it than not.
Don't add any additional text comments, your response must contain only program with invariants.
Do not provide ANY explanations. Don't include markdown backticks. Respond only in Python code, nothing else.
Also add assertions in necessary places.
Do not change the code, only add invariants and assertions. Don't remove any helper functions, they are there to help you.

Pay attention to important details of Nagini syntax:
1. You should use only single inequalities of type `a <= b` or equalities `a == b`
2. Use `Acc(list_pred(x))` invariants for variables of type List[] (for example, if x is of type List[int], add `Acc(list_pred(x))` invariants to all cycles in the scope of variable x)
3. Try to reuse the invariants, encountered as preconditions and postconditions, if these invariants hold during cycle execution
4. Don't use any built-in functions
5. Put invariants into beginning of each cycle

You might need to work with accumulating functions, such as sum, so here's an example of how to do that:
```
from typing import cast, List, Dict, Set, Optional, Union
from nagini_contracts.contracts import *

@Pure
def Sum(a : List[int], s : int, t : int) -> int :
    Requires(Acc(list_pred(a)))
    Requires(((0) <= (s)) and ((s) <= (t)) and ((t) <= (len(a))))

    if s == t:
        return 0
    else:
        return (a)[t - 1] + (Sum(a, s, t - 1))

def sum_loop(numbers: List[int]) -> int:
    Requires(Acc(list_pred(numbers)))
    Ensures(Acc(list_pred(numbers)))
    Ensures(Result() == Sum(numbers, 0, len(numbers)))
    s = int(0)
    i = int(0)
    while (i) < (len(numbers)):
        Invariant(Acc(list_pred(numbers)))
        Invariant(0 <= i and i <= len(numbers))
        Invariant(Forall(int, lambda d_1_p_:
            (Implies(0 <= d_1_p_ and d_1_p_ < len(numbers), Sum(numbers, 0, d_1_p_ + 1) == Sum(numbers, 0, d_1_p_) + numbers[d_1_p_]), [[Sum(numbers, 0, d_1_p_ + 1)]])))
        Invariant(s == Sum(numbers, 0, i))
        Assert(Sum(numbers, 0, i + 1) == Sum(numbers, 0, i) + numbers[i])
        s = s + (numbers)[i]
        i = i + 1
    return s
```
The program:
{program}
