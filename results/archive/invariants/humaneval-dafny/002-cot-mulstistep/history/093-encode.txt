User: Given the following program, for each function, determine if it has a specification. If it does not, is it itself a specification? If it is a specification, what does it specify?
```dafny
function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
}

lemma sum_prop(s: seq<int>)
    requires |s| > 0
    ensures sum(s) == sum(s[..|s| - 1]) + s[ |s| - 1 ]
{
    if (|s| > 1) {
        assert (s[1..][..|s[1..]| - 1]) == s[1..|s| - 1];
    }
}
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
    {
        s := s + numbers[i];

        i := i + 1;
    }
}
```


LLM: Let's go function by function. The first function, `sum` does not have a specification, as can be seen by the absence of either a `requires` or `ensures` clause. This means that this function is probably a specification itself. Let's consider, what it can be step by step. We can see that the aruguments to this function are a sequence of integers. We can see that the function returns an integer. We can conclude that the function does some accumulation of integers from the sequence. Looking at the body, we can see that the function takes the first element of the sequence and adds it to the accumulated result of evaluating the `sum` function on the rest of the sequence. This means the function is a specification for the sum of the elements of the sequence.

Next, we have the `sum_prop` lemma. Considering it's specification, we can see that it requires a non-empty sequence of integers, as seen by the `requires |s| > 0` clause. Looking at the ensures clause, we can see that the lemma ensures that the sum of the sequence (as computed by the `sum` function) is equal to the sum of the elements of the sequence without the last element, plus that last element. This is important to prove, because the sum function drops the first element and thus it is not obvious for the prover that the last element can be dropped in the same way.

Finally, we have the `sum_loop` method. This method has a specification, as indicated by the `ensures` clause. The specification states that the returned value `s` should be equal to the sum of the input sequence `numbers`, as computed by the `sum` function, as seen by the `ensures s == sum(numbers)` clause.

In summary:
1. The `sum` function is itself a specification for computing the sum of a sequence of integers.
2. The `sum_prop` lemma has a specification that proves a property about the `sum` function.
3. The `sum_loop` method has a specification that ensures it correctly computes the sum of a sequence of integers, matching the result of the `sum` function.


User: Now we are finished with the specifications. Let's move onto the loops.
Given the following program, for each function, determine if it has loops. If it does, try to determine what the loop does in detail. Go through all your thinking and reasoning process step by step.
```dafny
function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
}

lemma sum_prop(s: seq<int>)
    requires |s| > 0
    ensures sum(s) == sum(s[..|s| - 1]) + s[ |s| - 1 ]
{
    if (|s| > 1) {
        assert (s[1..][..|s[1..]| - 1]) == s[1..|s| - 1];
    }
}
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
    {
        s := s + numbers[i];

        i := i + 1;
    }
}
```


LLM: Looking at the functions, we can see that the 'sum' function uses recursion and thus contains no loops. The 'sum_prop' lemma, in the same way, does not contain any loops, as evidenced by the absence of 'while' and 'for' keywords.
Now, let's examine the 'sum_loop' method. This method contains a while loop that iterates through the elements of the 'numbers' sequence. The loop starts with 's' and 'i' initialized to 0, and continues as long as 'i' is less than the length of 'numbers'. Let's try to understand what 's' and 'i' represent in this context.

Looking at the body of the loop, we can see that it adds the current element of 'numbers' to 's'. This means that 's' is the running sum of the elements in 'numbers', namely 's = sum(numbers[..i])'. 'i' is easier to analyze. It is the index of the current element being processed. In each iteration of the loop, 'i' is incremented by 1, so 'i' represents the index of the next element to be processed.

Each iteration of the loop adds the current element to 's', and then increments 'i' to move to the next element. This process continues until 'i' reaches the length of 'numbers', at which point the loop terminates and 's' holds the final sum of the elements in 'numbers'.


User: As we've already analyzed the specifications and the loops, it's time to try to analyze what invariants and patterns hold during the execution of the program. Go over the found loops in the following program in the code and try to find out what invariants and patterns they hold. Go through all your thinking and reasoning process step by step.
```dafny
function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
}

lemma sum_prop(s: seq<int>)
    requires |s| > 0
    ensures sum(s) == sum(s[..|s| - 1]) + s[ |s| - 1 ]
{
    if (|s| > 1) {
        assert (s[1..][..|s[1..]| - 1]) == s[1..|s| - 1];
    }
}
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
    {
        s := s + numbers[i];

        i := i + 1;
    }
}
```


LLM: As we've seen, the loop in the `sum_loop` function goes over the elements of the array `numbers` and adds them to the `s` variable, which is equal to the `sum(numbers[..i])` for all `i`, such that `0 <= i <= |numbers|`. This means that during the execution of the loop the following invariant holds:
1. `0 <= i <= |numbers|`
2. `s == sum(numbers[..i])`

The second invariant might be a bit difficult to prove, as it adds the last element of the array to the sum, while, as I've said before, the `sum` function is defined as `sum(a) == a[0] + sum(a[1..])`. However, as we've seen, it's possible to use the `sum_prop` function to prove that this invariant holds.
Let's work out how to use it. If applied to the `numbers[..i + 1]`, we get:
`sum(numbers[..i + 1]) == sum(numbers[..i + 1][..i]) + numbers[i]`. It might be difficult for dafny to prove that `sum(numbers[..i + 1][..i]) == sum(numbers[..i])`, so I'd suggest adding an assertion before calling `sum_prop` to make sure that this is the case, namely `assert numbers[..i + 1][..i] == numbers[..i]`.
So, to use the `sum_prop`, I'd suggest the following code:
```
assert numbers[..i + 1][..i] == numbers[..i]; // assert that taking a slice of a slice is the same as taking a slice of the original array
sum_prop(numbers[..i + 1]); // use a lemma to prove the invariant
assert sum(numbers[..i + 1]) == sum(numbers[..i + 1][..i]) + numbers[i];
```

In conclusion, we can say that two invariants hold and the second one could be proved using the `sum_prop` function.


User: It's time to rewrite the program to contain the invariants and assertions that we've found. Work on the following program and go step by step through the reasoning process. After that, output the rewritten program in the `<answer>` tag without backticks.

```dafny
function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
}

lemma sum_prop(s: seq<int>)
    requires |s| > 0
    ensures sum(s) == sum(s[..|s| - 1]) + s[ |s| - 1 ]
{
    if (|s| > 1) {
        assert (s[1..][..|s[1..]| - 1]) == s[1..|s| - 1];
    }
}
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
    {
        s := s + numbers[i];

        i := i + 1;
    }
}
```


LLM: During the previous steps, we've found that the `sum_loop` function has a loop that goes over the elements of the array `numbers` and adds them to the `s` variable, which is equal to the `sum(numbers[..i])` for all `i`, such that `0 <= i <= |numbers|`. This means that during the execution of the loop the following invariant holds:
1. `0 <= i <= |numbers|`
2. `s == sum(numbers[..i])`

Let's put them in:
```dafny
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
        invariant 0 <= i <= |numbers|
        invariant s == sum(numbers[..i])
    {
        s := s + numbers[i];

        i := i + 1;
    }
}
```

We've also worked out how to prove the second invariant. For that we need to prove to the verifier that `sum(numbers[..i + 1]) == sum(numbers[..i]) + numbers[i]`. For that we need to use the `sum_prop` function, as follows:
```dafny
assert numbers[..i + 1][..i] == numbers[..i]; // assert that taking a slice of a slice is the same as taking a slice of the original array
sum_prop(numbers[..i + 1]); // use a lemma to prove the invariant
assert sum(numbers[..i + 1]) == sum(numbers[..i + 1][..i]) + numbers[i];
```
Let's add these lines to the code:
```dafny
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
        invariant 0 <= i <= |numbers|
        invariant s == sum(numbers[..i])
    {
        s := s + numbers[i];

        assert numbers[..i + 1][..i] == numbers[..i]; // assert that taking a slice of a slice is the same as taking a slice of the original array
        sum_prop(numbers[..i + 1]); // use a lemma to prove the invariant
        assert sum(numbers[..i + 1]) == sum(numbers[..i + 1][..i]) + numbers[i];

        i := i + 1;
    }
}
```

Other than that, we didn't find any other invariants or patterns that hold during the execution of the program. Therefore, the resulting program is (notice the lack of backticks):
<answer>
function sum(s: seq<int>) : int {
    if |s| == 0 then 0 else s[0] + sum(s[1..])
}

lemma sum_prop(s: seq<int>)
    requires |s| > 0
    ensures sum(s) == sum(s[..|s| - 1]) + s[ |s| - 1 ]
{
    if (|s| > 1) {
        assert (s[1..][..|s[1..]| - 1]) == s[1..|s| - 1];
    }
}
method sum_loop(numbers: seq<int>) returns (s: int)
    ensures s == sum(numbers)
{
    s := 0;
    var i := 0;
    while (i < |numbers|)
        invariant 0 <= i <= |numbers|
        invariant s == sum(numbers[..i])
    {
        s := s + numbers[i];

        assert numbers[..i + 1][..i] == numbers[..i]; // assert that taking a slice of a slice is the same as taking a slice of the original array
        sum_prop(numbers[..i + 1]); // use a lemma to prove the invariant
        assert sum(numbers[..i + 1]) == sum(numbers[..i + 1][..i]) + numbers[i];

        i := i + 1;
    }
}
</answer>


User: Given the following program, for each function, determine if it has a specification. If it does not, is it itself a specification? If it is a specification, what does it specify?

```dafny
method encode(s: string) returns (t: string)
  // pre-conditions-start
  requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures |s| == |t|
  ensures forall i :: 0 <= i < |s| && is_vowel(s[i]) ==> t[i] == rot2(swap_case(s[i]))
  ensures forall i :: 0 <= i < |s| && !is_vowel(s[i]) ==> t[i] == swap_case(s[i])
  // post-conditions-end
{
  // impl-start
  t := "";
  var i := 0;
  while i < |s|
  {
    if is_vowel(s[i]) {
      t := t + [rot2(swap_case(s[i]))];
    } else {
      t := t + [swap_case(s[i])];
    }
    i := i + 1;
  }
  // impl-end
}
function swap_case(c: char): char
  // pre-conditions-start
  requires 'a' <= c <= 'z' || 'A' <= c <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures 'a' <= c <= 'z' ==> 'A' <= swap_case(c) <= 'Z'
  ensures 'A' <= c <= 'Z' ==> 'a' <= swap_case(c) <= 'z'
  ensures is_vowel(swap_case(c)) == is_vowel(c)
  // post-conditions-end
{
  // impl-start
  if 'a' <= c <= 'z' then
    'A' + (c - 'a')
  else
    'a' + (c - 'A')
  // impl-end
}
function rot2(c: char): char
  requires is_vowel(c)
{
    (c as int + 2) as char
}
predicate is_vowel(c: char) {
    (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
    || (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
}
```


LLM: Let's analyze each function in the given program:

1. `encode` method:
   This method has a specification. It includes both preconditions (requires clauses) and postconditions (ensures clauses).
   - Precondition: All characters in the input string must be alphabetic (lowercase or uppercase).
   - Postconditions: 
     - The output string has the same length as the input string.
     - Vowels in the input are transformed by swapping case and applying rot2.
     - Non-vowels in the input are transformed by swapping case only.

2. `swap_case` function:
   This function has a specification. It includes both preconditions and postconditions.
   - Precondition: The input character must be alphabetic (lowercase or uppercase).
   - Postconditions:
     - If the input is lowercase, the output is uppercase, and vice versa.
     - The vowel status of the character is preserved after swapping case.

3. `rot2` function:
   This function has a partial specification. It only includes a precondition.
   - Precondition: The input character must be a vowel.
   It does not have any postconditions specified.

4. `is_vowel` predicate:
   This predicate does not have an explicit specification (no requires or ensures clauses). However, it is itself a specification. It specifies what constitutes a vowel character, both lowercase and uppercase.

In summary, `encode` and `swap_case` have full specifications, `rot2` has a partial specification, and `is_vowel` is itself a specification for determining vowels.

User: Given the following program, for each function, determine if it has loops. If it does, try to determine what the loop does in detail. Go through all your thinking and reasoning process step by step.
```dafny
method encode(s: string) returns (t: string)
  // pre-conditions-start
  requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures |s| == |t|
  ensures forall i :: 0 <= i < |s| && is_vowel(s[i]) ==> t[i] == rot2(swap_case(s[i]))
  ensures forall i :: 0 <= i < |s| && !is_vowel(s[i]) ==> t[i] == swap_case(s[i])
  // post-conditions-end
{
  // impl-start
  t := "";
  var i := 0;
  while i < |s|
  {
    if is_vowel(s[i]) {
      t := t + [rot2(swap_case(s[i]))];
    } else {
      t := t + [swap_case(s[i])];
    }
    i := i + 1;
  }
  // impl-end
}
function swap_case(c: char): char
  // pre-conditions-start
  requires 'a' <= c <= 'z' || 'A' <= c <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures 'a' <= c <= 'z' ==> 'A' <= swap_case(c) <= 'Z'
  ensures 'A' <= c <= 'Z' ==> 'a' <= swap_case(c) <= 'z'
  ensures is_vowel(swap_case(c)) == is_vowel(c)
  // post-conditions-end
{
  // impl-start
  if 'a' <= c <= 'z' then
    'A' + (c - 'a')
  else
    'a' + (c - 'A')
  // impl-end
}
function rot2(c: char): char
  requires is_vowel(c)
{
    (c as int + 2) as char
}
predicate is_vowel(c: char) {
    (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
    || (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
}
```


LLM: Let's analyze each function in the program for loops:

1. `encode` method:
   This method contains a while loop. Let's analyze it in detail:
   
   - The loop initializes `t` as an empty string and `i` as 0.
   - It continues while `i` is less than the length of the input string `s`.
   - In each iteration:
     - It checks if the current character `s[i]` is a vowel.
     - If it's a vowel, it applies `swap_case` followed by `rot2` to the character and appends it to `t`.
     - If it's not a vowel, it only applies `swap_case` to the character and appends it to `t`.
     - It increments `i` by 1.
   
   The loop effectively processes each character of the input string `s`, transforming it according to the specified rules, and builds the output string `t` character by character.

2. `swap_case` function:
   This function does not contain any loops. It uses a simple if-else statement to determine whether to convert from lowercase to uppercase or vice versa.

3. `rot2` function:
   This function does not contain any loops. It performs a simple arithmetic operation on the input character.

4. `is_vowel` predicate:
   This predicate does not contain any loops. It uses a series of logical OR operations to check if the input character is a vowel.

In conclusion, only the `encode` method contains a loop. This loop iterates through each character of the input string, applying the encoding rules to build the output string. The loop ensures that each character is processed exactly once, and the resulting output string has the same length as the input string.

User: As we've already analyzed the specifications and the loops, it's time to try to analyze what invariants and patterns hold during the execution of the program. Go over the found loops in the following program in the code and try to find out what invariants and patterns they hold. Go through all your thinking and reasoning process step by step.
```dafny
method encode(s: string) returns (t: string)
  // pre-conditions-start
  requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures |s| == |t|
  ensures forall i :: 0 <= i < |s| && is_vowel(s[i]) ==> t[i] == rot2(swap_case(s[i]))
  ensures forall i :: 0 <= i < |s| && !is_vowel(s[i]) ==> t[i] == swap_case(s[i])
  // post-conditions-end
{
  // impl-start
  t := "";
  var i := 0;
  while i < |s|
  {
    if is_vowel(s[i]) {
      t := t + [rot2(swap_case(s[i]))];
    } else {
      t := t + [swap_case(s[i])];
    }
    i := i + 1;
  }
  // impl-end
}
function swap_case(c: char): char
  // pre-conditions-start
  requires 'a' <= c <= 'z' || 'A' <= c <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures 'a' <= c <= 'z' ==> 'A' <= swap_case(c) <= 'Z'
  ensures 'A' <= c <= 'Z' ==> 'a' <= swap_case(c) <= 'z'
  ensures is_vowel(swap_case(c)) == is_vowel(c)
  // post-conditions-end
{
  // impl-start
  if 'a' <= c <= 'z' then
    'A' + (c - 'a')
  else
    'a' + (c - 'A')
  // impl-end
}
function rot2(c: char): char
  requires is_vowel(c)
{
    (c as int + 2) as char
}
predicate is_vowel(c: char) {
    (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
    || (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
}
```


LLM: Let's analyze the loop in the `encode` method to identify invariants and patterns:

1. Loop bounds invariant:
   - `0 <= i <= |s|`
   This invariant holds because `i` starts at 0, increases by 1 in each iteration, and the loop terminates when `i` reaches `|s|`.

2. Output string length invariant:
   - `|t| == i`
   This invariant holds because `t` starts empty, and in each iteration, exactly one character is added to `t`.

3. Processed characters invariant:
   - `forall j :: 0 <= j < i ==> 
      (is_vowel(s[j]) ==> t[j] == rot2(swap_case(s[j]))) &&
      (!is_vowel(s[j]) ==> t[j] == swap_case(s[j]))`
   This invariant ensures that all characters processed so far (up to index `i-1`) have been correctly transformed according to the encoding rules.

4. Remaining characters invariant:
   - `forall j :: i <= j < |s| ==> s[j] == s[j]`
   This trivial invariant emphasizes that characters after index `i` remain unchanged in the input string.

5. Alphabetic characters invariant:
   - `forall j :: 0 <= j < |t| ==> 'a' <= t[j] <= 'z' || 'A' <= t[j] <= 'Z'`
   This invariant ensures that all characters in the output string `t` remain alphabetic, which follows from the precondition on `s` and the properties of `swap_case` and `rot2`.

Patterns:
1. Character-by-character processing:
   The loop processes each character of the input string exactly once, in order.

2. Conditional transformation:
   Each character is transformed based on whether it's a vowel or not, using a consistent rule for each case.

3. String building:
   The output string is built incrementally by appending one character at a time.

4. Index tracking:
   The loop uses an index `i` to keep track of the current position in both the input and output strings.

These invariants and patterns ensure that the `encode` method correctly transforms the input string according to the specified rules, maintaining the length and alphabetic nature of the string while applying the appropriate transformations to vowels and consonants.

User: It's time to rewrite the program to contain the invariants and assertions that we've found. Work on the following program and go step by step through the reasoning process. After that, output the rewritten program in the `<answer>` tag without backticks.

method encode(s: string) returns (t: string)
  // pre-conditions-start
  requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures |s| == |t|
  ensures forall i :: 0 <= i < |s| && is_vowel(s[i]) ==> t[i] == rot2(swap_case(s[i]))
  ensures forall i :: 0 <= i < |s| && !is_vowel(s[i]) ==> t[i] == swap_case(s[i])
  // post-conditions-end
{
  // impl-start
  t := "";
  var i := 0;
  while i < |s|
  {
    if is_vowel(s[i]) {
      t := t + [rot2(swap_case(s[i]))];
    } else {
      t := t + [swap_case(s[i])];
    }
    i := i + 1;
  }
  // impl-end
}
function swap_case(c: char): char
  // pre-conditions-start
  requires 'a' <= c <= 'z' || 'A' <= c <= 'Z'
  // pre-conditions-end
  // post-conditions-start
  ensures 'a' <= c <= 'z' ==> 'A' <= swap_case(c) <= 'Z'
  ensures 'A' <= c <= 'Z' ==> 'a' <= swap_case(c) <= 'z'
  ensures is_vowel(swap_case(c)) == is_vowel(c)
  // post-conditions-end
{
  // impl-start
  if 'a' <= c <= 'z' then
    'A' + (c - 'a')
  else
    'a' + (c - 'A')
  // impl-end
}
function rot2(c: char): char
  requires is_vowel(c)
{
    (c as int + 2) as char
}
predicate is_vowel(c: char) {
    (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
    || (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
}


LLM: Let's rewrite the program to include the invariants and assertions we've identified. We'll focus on modifying the `encode` method, as that's where the loop and most of the logic resides. Here's the step-by-step reasoning:

1. We'll add the loop invariants we identified earlier.
2. We'll add assertions to check that our invariants hold at the end of each loop iteration.
3. We'll keep the existing pre-conditions and post-conditions.

Here's the rewritten program:

<answer>
method encode(s: string) returns (t: string)
  requires forall i :: 0 <= i < |s| ==> 'a' <= s[i] <= 'z' || 'A' <= s[i] <= 'Z'
  ensures |s| == |t|
  ensures forall i :: 0 <= i < |s| && is_vowel(s[i]) ==> t[i] == rot2(swap_case(s[i]))
  ensures forall i :: 0 <= i < |s| && !is_vowel(s[i]) ==> t[i] == swap_case(s[i])
{
  t := "";
  var i := 0;
  while i < |s|
    invariant 0 <= i <= |s|
    invariant |t| == i
    invariant forall j :: 0 <= j < i ==> 
      (is_vowel(s[j]) ==> t[j] == rot2(swap_case(s[j]))) &&
      (!is_vowel(s[j]) ==> t[j] == swap_case(s[j]))
    invariant forall j :: i <= j < |s| ==> s[j] == s[j]
    invariant forall j :: 0 <= j < |t| ==> 'a' <= t[j] <= 'z' || 'A' <= t[j] <= 'Z'
  {
    if is_vowel(s[i]) {
      t := t + [rot2(swap_case(s[i]))];
    } else {
      t := t + [swap_case(s[i])];
    }
    i := i + 1;

    // Assertions to check invariants
    assert 0 <= i <= |s|;
    assert |t| == i;
    assert forall j :: 0 <= j < i ==> 
      (is_vowel(s[j]) ==> t[j] == rot2(swap_case(s[j]))) &&
      (!is_vowel(s[j]) ==> t[j] == swap_case(s[j]));
    assert forall j :: i <= j < |s| ==> s[j] == s[j];
    assert forall j :: 0 <= j < |t| ==> 'a' <= t[j] <= 'z' || 'A' <= t[j] <= 'Z';
  }
}

function swap_case(c: char): char
  requires 'a' <= c <= 'z' || 'A' <= c <= 'Z'
  ensures 'a' <= c <= 'z' ==> 'A' <= swap_case(c) <= 'Z'
  ensures 'A' <= c <= 'Z' ==> 'a' <= swap_case(c) <= 'z'
  ensures is_vowel(swap_case(c)) == is_vowel(c)
{
  if 'a' <= c <= 'z' then
    'A' + (c - 'a')
  else
    'a' + (c - 'A')
}

function rot2(c: char): char
  requires is_vowel(c)
{
    (c as int + 2) as char
}

predicate is_vowel(c: char) {
    (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')
    || (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')
}
</answer>

