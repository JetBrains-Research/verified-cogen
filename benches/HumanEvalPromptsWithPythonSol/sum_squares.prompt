"
This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 

Examples:
For lst = [1,2,3] the output should be 6
For lst = []  the output should be 0
For lst = [-1,-5,2,-1,-5]  the output should be -126

Here's a correct unverified solution in python:
```python
def sum_squares(lst):
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
def check(sum_squares):
    # Check some simple cases
    assert sum_squares([1,2,3])==14, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([1,4,9])==98, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([1,3,5,7])==84, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([1.4,4.2,0])==29, "This prints if this assert fails 1 (good for debugging!)"
    assert sum_squares([-2.4,1,1])==6, "This prints if this assert fails 1 (good for debugging!)"
check(sum_squares)
def sum_squares(lst):
    "
    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
def check(sum_squares):
    # Check some simple cases
    assert sum_squares([1,2,3]) == 6
    assert sum_squares([]) == 0
    assert sum_squares([-1,-5,2,-1,-5]) == -126
    # Don't remove this line:
check(sum_squares)
```
